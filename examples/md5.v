/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.4.6. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module system
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input [32:0] data

      // Outputs
    , output wire [32:0] hash
    );
  // Clash.hs:(144,1)-(145,66)
  reg [514:0] c$ds_app_arg = {{1'b1,2'd0},   {32'd0,   32'd0,   32'd0,   32'd0,   32'd128,   32'd0,   32'd0,
                 32'd0,   32'd0,   32'd0,   32'd0,   32'd0,   32'd0,   32'd0,
                 32'd0,   32'd4}};
  wire [32:0] result;
  wire [547:0] c$case_alt;
  wire  c$app_arg;
  wire [31:0] result_0;
  // Clash.hs:72:1-13
  wire signed [63:0] wild4;
  // Clash.hs:72:1-13
  wire signed [63:0] c$wild4_app_arg;
  // Clash.hs:72:1-13
  wire [3:0] g;
  wire [511:0] c$app_arg_0;
  wire [511:0] c$case_alt_0;
  wire [511:0] result_1;
  // Clash.hs:72:1-13
  wire [31:0] d;
  // Clash.hs:72:1-13
  wire [511:0] message;
  // Clash.hs:72:1-13
  wire signed [63:0] wild4_0;
  // Clash.hs:72:1-13
  wire signed [63:0] c$wild4_app_arg_0;
  wire [2:0] c$app_arg_1;
  wire [2:0] c$case_alt_1;
  reg [2:0] c$case_alt_2;
  // Clash.hs:72:1-13
  wire [2:0] data_ctr;
  // Clash.hs:(148,1)-(149,78)
  reg [6:0] c$ds_app_arg_0 = {1'b0,2'd0,4'bxxxx};
  wire [44:0] result_2;
  wire [51:0] result_3;
  wire  c$app_arg_2;
  wire  c$app_arg_3;
  wire [4:0] result_4;
  wire [31:0] result_5;
  wire signed [63:0] c$app_arg_4;
  // Clash.hs:95:1-11
  wire signed [63:0] wild4_1;
  // Clash.hs:95:1-11
  wire signed [63:0] c$wild4_app_arg_1;
  // Clash.hs:95:1-11
  wire [5:0] index;
  wire [6:0] c$app_arg_5;
  wire [6:0] c$case_alt_3;
  reg [6:0] c$case_alt_4;
  reg [6:0] c$case_alt_5;
  // Clash.hs:(132,1)-(133,84)
  reg [127:0] c$ds_app_arg_1 = {32'd1732584193,   32'd4023233417,   32'd2562383102,   32'd271733878};
  wire [127:0] result_6;
  // Clash.hs:34:1-10
  wire [31:0] s_A;
  // Clash.hs:34:1-10
  wire [31:0] s_B;
  // Clash.hs:34:1-10
  wire [31:0] s_C;
  // Clash.hs:34:1-10
  wire [31:0] s_D;
  // Clash.hs:34:1-10
  wire  enable;
  wire [255:0] c$case_alt_6;
  wire [31:0] c$app_arg_6;
  wire [31:0] c$app_arg_7;
  wire [31:0] c$app_arg_8;
  wire [31:0] c$app_arg_9;
  wire [35:0] result_7;
  wire [35:0] result_8;
  reg [3:0] result_9;
  reg [31:0] c$app_arg_10;
  wire [31:0] c$app_arg_11;
  wire [5:0] \c$*#Out ;
  reg [5:0] \c$*#Out_app_arg ;
  // Clash.hs:46:1-10
  wire [5:0] stage;
  // Clash.hs:46:1-10
  wire [5:0] i;
  wire [127:0] result_10;
  // Clash.hs:63:1-12
  wire [31:0] f;
  // Clash.hs:63:1-12
  wire [31:0] mg;
  // Clash.hs:63:1-12
  wire [4:0] s;
  // Clash.hs:63:1-12
  wire [31:0] k;
  wire [127:0] c$case_alt_7;
  wire [31:0] c$app_arg_12;
  // Clash.hs:63:1-12
  wire signed [63:0] wild2;
  // Clash.hs:63:1-12
  wire signed [63:0] c$wild2_app_arg;
  // Clash.hs:(128,1)-(129,72)
  reg [129:0] c$ds_app_arg_4 = {{32'd1732584193,   32'd4023233417,   32'd2562383102,   32'd271733878},   2'd0};
  // Definitions.hs:33:1-8
  wire [31:0] \a' ;
  // Definitions.hs:33:1-8
  wire [31:0] \b' ;
  // Definitions.hs:33:1-8
  wire [31:0] \c' ;
  // Definitions.hs:33:1-8
  wire [31:0] \d' ;
  wire [127:0] c$case_alt_8;
  wire [1:0] c$app_arg_13;
  reg [32:0] c$case_alt_9;
  wire [32:0] c$app_arg_14;
  wire [162:0] result_11;
  // Clash.hs:12:1-11
  wire [127:0] saved_hash;
  // Clash.hs:12:1-11
  wire [1:0] output_ctr;
  // Clash.hs:12:1-11
  wire  ready;
  // Clash.hs:12:1-11
  wire [127:0] \saved_hash' ;
  // Clash.hs:12:1-11
  wire  should_emit;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] fabcd_out_D;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] fabcd_out_C;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] fabcd_out_B;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] fabcd_out_A;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] abcd_out_D;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] abcd_out_C;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] abcd_out_B;
  // Clash.hs:(153,1)-(154,54)
  wire [31:0] abcd_out_A;
  wire [1:0] c$i_33;
  wire [1:0] c$case_alt_selection_3;
  wire [319:0] c$vecFlat;
  wire [2047:0] c$vecFlat_0;
  wire [5:0] c$case_alt_selection_7;
  wire [1:0] c$case_alt_selection_10;
  wire [5:0] c$bv;
  wire [5:0] c$bv_0;

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$ds_app_arg_register
    if ( rst) begin
      c$ds_app_arg <= {{1'b1,2'd0},   {32'd0,   32'd0,   32'd0,   32'd0,   32'd128,   32'd0,   32'd0,
                   32'd0,   32'd0,   32'd0,   32'd0,   32'd0,   32'd0,   32'd0,
                   32'd0,   32'd4}};
    end else if (en) begin
      c$ds_app_arg <= c$case_alt[547:33];
    end
  end
  // register end

  assign result = c$case_alt[32:0];

  assign c$case_alt = {{c$app_arg_1,
                        c$app_arg_0},   {result_0,   c$app_arg}};

  assign c$app_arg = data_ctr[2:2] ? 1'b1 : 1'b0;

  // index begin
  wire [31:0] vecArray [0:16-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 16; i_0=i_0+1) begin : mk_array
    assign vecArray[(16-1)-i_0] = message[i_0*32+:32];
  end
  endgenerate
  assign result_0 = vecArray[(wild4)];
  // index end

  assign wild4 = $signed(c$wild4_app_arg);

  assign c$wild4_app_arg = $unsigned({{(64-4) {1'b0}},g});

  assign g = result_7[3:0];

  assign c$app_arg_0 = data[32:32] ? c$case_alt_0 : message;

  assign c$case_alt_0 = data_ctr[2:2] ? result_1 : message;

  // vector replace begin
  genvar i_1;
  generate
  for (i_1=0;i_1<16;i_1=i_1+1) begin : vector_replace
    assign result_1[(15-i_1)*32+:32] = (wild4_0) == i_1 ? d : message[(15-i_1)*32+:32];
  end
  endgenerate
  // vector replace end

  assign d = data[31:0];

  assign message = c$ds_app_arg[511:0];

  assign wild4_0 = $signed(c$wild4_app_arg_0);

  assign c$i_33 = data_ctr[1:0];

  assign c$wild4_app_arg_0 = $unsigned({{(64-2) {1'b0}},c$i_33});

  assign c$app_arg_1 = data[32:32] ? c$case_alt_1 : data_ctr;

  assign c$case_alt_1 = data_ctr[2:2] ? c$case_alt_2 : ({3 {1'bx}});

  assign c$case_alt_selection_3 = data_ctr[1:0];

  always @(*) begin
    case(c$case_alt_selection_3)
      2'd3 : c$case_alt_2 = {1'b0,2'bxx};
      default : c$case_alt_2 = {1'b1,data_ctr[1:0] + 2'd1};
    endcase
  end

  assign data_ctr = c$ds_app_arg[514:512];

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$ds_app_arg_0_register
    if ( rst) begin
      c$ds_app_arg_0 <= {1'b0,2'd0,4'bxxxx};
    end else if (en) begin
      c$ds_app_arg_0 <= result_3[51:45];
    end
  end
  // register end

  assign result_2 = result_3[44:0];

  assign result_3 = {c$app_arg_5,   {result_5,
                                     result_4,   index,   c$app_arg_3,
                                     c$app_arg_2}};

  assign c$app_arg_2 = c$ds_app_arg_0[6:6] ? (c$ds_app_arg_0[5:0] == 6'd63) : 1'b0;

  assign c$app_arg_3 = c$ds_app_arg_0[6:6] ? (~ result[0:0]) : 1'b0;

  assign c$vecFlat = {5'd7,   5'd12,   5'd17,
                      5'd22,   5'd7,   5'd12,   5'd17,   5'd22,
                      5'd7,   5'd12,   5'd17,   5'd22,   5'd7,
                      5'd12,   5'd17,   5'd22,   5'd5,   5'd9,
                      5'd14,   5'd20,   5'd5,   5'd9,   5'd14,
                      5'd20,   5'd5,   5'd9,   5'd14,   5'd20,
                      5'd5,   5'd9,   5'd14,   5'd20,   5'd4,
                      5'd11,   5'd16,   5'd23,   5'd4,   5'd11,
                      5'd16,   5'd23,   5'd4,   5'd11,   5'd16,
                      5'd23,   5'd4,   5'd11,   5'd16,   5'd23,
                      5'd6,   5'd10,   5'd15,   5'd21,   5'd6,
                      5'd10,   5'd15,   5'd21,   5'd6,   5'd10,
                      5'd15,   5'd21,   5'd6,   5'd10,   5'd15,
                      5'd21};

  // index begin
  wire [4:0] vecArray_0 [0:64-1];
  genvar i_2;
  generate
  for (i_2=0; i_2 < 64; i_2=i_2+1) begin : mk_array_0
    assign vecArray_0[(64-1)-i_2] = c$vecFlat[i_2*5+:5];
  end
  endgenerate
  assign result_4 = vecArray_0[c$app_arg_4];
  // index end

  assign c$vecFlat_0 = {32'd3614090360,
                        32'd3905402710,   32'd606105819,
                        32'd3250441966,   32'd4118548399,
                        32'd1200080426,   32'd2821735955,
                        32'd4249261313,   32'd1770035416,
                        32'd2336552879,   32'd4294925233,
                        32'd2304563134,   32'd1804603682,
                        32'd4254626195,   32'd2792965006,
                        32'd1236535329,   32'd4129170786,
                        32'd3225465664,   32'd643717713,
                        32'd3921069994,   32'd3593408605,
                        32'd38016083,   32'd3634488961,
                        32'd3889429448,   32'd568446438,
                        32'd3275163606,   32'd4107603335,
                        32'd1163531501,   32'd2850285829,
                        32'd4243563512,   32'd1735328473,
                        32'd2368359562,   32'd4294588738,
                        32'd2272392833,   32'd1839030562,
                        32'd4259657740,   32'd2763975236,
                        32'd1272893353,   32'd4139469664,
                        32'd3200236656,   32'd681279174,
                        32'd3936430074,   32'd3572445317,
                        32'd76029189,   32'd3654602809,
                        32'd3873151461,   32'd530742520,
                        32'd3299628645,   32'd4096336452,
                        32'd1126891415,   32'd2878612391,
                        32'd4237533241,   32'd1700485571,
                        32'd2399980690,   32'd4293915773,
                        32'd2240044497,   32'd1873313359,
                        32'd4264355552,   32'd2734768916,
                        32'd1309151649,   32'd4149444226,
                        32'd3174756917,   32'd718787259,
                        32'd3951481745};

  // index begin
  wire [31:0] vecArray_1 [0:64-1];
  genvar i_3;
  generate
  for (i_3=0; i_3 < 64; i_3=i_3+1) begin : mk_array_1
    assign vecArray_1[(64-1)-i_3] = c$vecFlat_0[i_3*32+:32];
  end
  endgenerate
  assign result_5 = vecArray_1[c$app_arg_4];
  // index end

  assign c$app_arg_4 = wild4_1;

  assign wild4_1 = $signed(c$wild4_app_arg_1);

  assign c$wild4_app_arg_1 = $unsigned({{(64-6) {1'b0}},index});

  assign index = c$ds_app_arg_0[6:6] ? c$ds_app_arg_0[5:0] : 6'd0;

  assign c$app_arg_5 = result[0:0] ? c$ds_app_arg_0 : c$case_alt_3;

  assign c$case_alt_3 = c$ds_app_arg_0[6:6] ? c$case_alt_4 : c$case_alt_5;

  assign c$case_alt_selection_7 = c$ds_app_arg_0[5:0];

  always @(*) begin
    case(c$case_alt_selection_7)
      6'd63 : c$case_alt_4 = {1'b0,2'd0,4'bxxxx};
      default : c$case_alt_4 = {1'b1,c$ds_app_arg_0[5:0] + 6'd1};
    endcase
  end

  assign c$case_alt_selection_10 = c$ds_app_arg_0[5:4];

  always @(*) begin
    case(c$case_alt_selection_10)
      2'd3 : c$case_alt_5 = {1'b1,6'd0};
      default : c$case_alt_5 = {1'b0,c$ds_app_arg_0[5:4] + 2'd1,4'bxxxx};
    endcase
  end

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$ds_app_arg_1_register
    if ( rst) begin
      c$ds_app_arg_1 <= {32'd1732584193,   32'd4023233417,   32'd2562383102,   32'd271733878};
    end else if (en) begin
      c$ds_app_arg_1 <= c$case_alt_6[255:128];
    end
  end
  // register end

  assign result_6 = c$case_alt_6[127:0];

  assign s_A = c$ds_app_arg_1[127:96];

  assign s_B = c$ds_app_arg_1[95:64];

  assign s_C = c$ds_app_arg_1[63:32];

  assign s_D = c$ds_app_arg_1[31:0];

  assign enable = result_2[1:1];

  assign c$case_alt_6 = {{c$app_arg_9,
                          c$app_arg_8,   c$app_arg_7,   c$app_arg_6},
                         c$ds_app_arg_1};

  assign c$app_arg_6 = enable ? fabcd_out_D : s_D;

  assign c$app_arg_7 = enable ? fabcd_out_C : s_C;

  assign c$app_arg_8 = enable ? fabcd_out_B : s_B;

  assign c$app_arg_9 = enable ? fabcd_out_A : s_A;

  assign result_7 = result_8;

  assign result_8 = {c$app_arg_10,   result_9};

  assign c$bv = (\c$*#Out  + 6'd1);

  assign c$bv_0 = (\c$*#Out  + 6'd5);

  always @(*) begin
    case(stage)
      6'd0 : result_9 = i[0+:4];
      6'd1 : result_9 = c$bv[0+:4];
      6'd2 : result_9 = c$bv_0[0+:4];
      6'd3 : result_9 = \c$*#Out [0+:4];
      default : result_9 = {4 {1'bx}};
    endcase
  end

  always @(*) begin
    case(stage)
      6'd0 : c$app_arg_10 = (abcd_out_B & abcd_out_C) | ((~ abcd_out_B) & abcd_out_D);
      6'd1 : c$app_arg_10 = (abcd_out_D & abcd_out_B) | (c$app_arg_11 & abcd_out_C);
      6'd2 : c$app_arg_10 = (abcd_out_B ^ abcd_out_C) ^ abcd_out_D;
      6'd3 : c$app_arg_10 = abcd_out_C ^ (abcd_out_B | c$app_arg_11);
      default : c$app_arg_10 = {32 {1'bx}};
    endcase
  end

  assign c$app_arg_11 = ~ abcd_out_D;

  assign \c$*#Out  = \c$*#Out_app_arg  * i;

  always @(*) begin
    case(stage)
      6'd1 : \c$*#Out_app_arg  = 6'd5;
      6'd2 : \c$*#Out_app_arg  = 6'd3;
      default : \c$*#Out_app_arg  = 6'd7;
    endcase
  end

  assign stage = i >> (64'sd4);

  assign i = result_2[7:2];

  assign result_10 = c$case_alt_7;

  assign f = result_7[35:4];

  assign mg = result[32:1];

  assign s = result_2[12:8];

  assign k = result_2[44:13];

  assign c$case_alt_7 = {abcd_out_D,
                         abcd_out_B + c$app_arg_12,   abcd_out_B,
                         abcd_out_C};

  // rotateL begin
  wire [2*32-1:0] u;
  assign u = {(((f + abcd_out_A) + k) + mg),(((f + abcd_out_A) + k) + mg)} << ((wild2) % 32);
  assign c$app_arg_12 = u[2*32-1 : 32];
  // rotateL end

  assign wild2 = $signed(c$wild2_app_arg);

  assign c$wild2_app_arg = $unsigned({{(64-5) {1'b0}},s});

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$ds_app_arg_4_register
    if ( rst) begin
      c$ds_app_arg_4 <= {{32'd1732584193,   32'd4023233417,   32'd2562383102,   32'd271733878},   2'd0};
    end else if (en) begin
      c$ds_app_arg_4 <= result_11[162:33];
    end
  end
  // register end

  assign hash = result_11[32:0];

  assign \a'  = saved_hash[127:96];

  assign \b'  = saved_hash[95:64];

  assign \c'  = saved_hash[63:32];

  assign \d'  = saved_hash[31:0];

  assign c$case_alt_8 = {fabcd_out_A + \a' ,
                         fabcd_out_B + \b' ,   fabcd_out_C + \c' ,
                         fabcd_out_D + \d' };

  assign c$app_arg_13 = should_emit ? (output_ctr + 2'd1) : output_ctr;

  always @(*) begin
    case(output_ctr)
      2'd0 : c$case_alt_9 = {1'b1,\saved_hash' [127:96]};
      2'd1 : c$case_alt_9 = {1'b1,\saved_hash' [95:64]};
      2'd2 : c$case_alt_9 = {1'b1,\saved_hash' [63:32]};
      2'd3 : c$case_alt_9 = {1'b1,\saved_hash' [31:0]};
      default : c$case_alt_9 = {33 {1'bx}};
    endcase
  end

  assign c$app_arg_14 = should_emit ? c$case_alt_9 : {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign result_11 = {{\saved_hash' ,
                       c$app_arg_13},   c$app_arg_14};

  assign saved_hash = c$ds_app_arg_4[129:2];

  assign output_ctr = c$ds_app_arg_4[1:0];

  assign ready = result_2[0:0];

  assign \saved_hash'  = ready ? c$case_alt_8 : saved_hash;

  assign should_emit = ready ? 1'b1 : (output_ctr != 2'd0);

  assign fabcd_out_D = result_10[31:0];

  assign fabcd_out_C = result_10[63:32];

  assign fabcd_out_B = result_10[95:64];

  assign fabcd_out_A = result_10[127:96];

  assign abcd_out_D = result_6[31:0];

  assign abcd_out_C = result_6[63:32];

  assign abcd_out_B = result_6[95:64];

  assign abcd_out_A = result_6[127:96];


endmodule

